"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeTodoConfig = exports.ensureTodoConfig = exports.getTodoConfig = void 0;
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const io_1 = require("./io");
const DETECT_TRAILING_WHITESPACE = /\s+$/;
/**
 * Gets the todo configuration.
 * Config values can be present in
 *
 * The package.json
 *
 * @example
 * ```json
 * {
 *   "lintTodo": {
 *     "daysToDecay": {
 *       "warn": 5,
 *       "error": 10
 *     }
 *   }
 * }
 * ```
 *
 * Environment variables (`TODO_DAYS_TO_WARN` or `TODO_DAYS_TO_ERROR`)
 * 	- Env vars override package.json config
 *
 * Passed in directly, such as from command line options.
 * 	- Passed in options override both env vars and package.json config
 *
 * @param baseDir - The base directory that contains the project's package.json.
 * @param todoConfig - The optional todo configuration.
 * @returns - The todo config object.
 */
function getTodoConfig(baseDir, todoConfig = {}) {
    const daysToDecayPackageConfig = getFromPackageJson(baseDir);
    const daysToDecayEnvVars = getFromEnvVars();
    let mergedConfig = Object.assign({}, daysToDecayPackageConfig, daysToDecayEnvVars, todoConfig);
    // we set a default config if the mergedConfig is an empty object, meaning either or both warn and error aren't
    // defined and the package.json doesn't explicitly define an empty config (they're opting out of defining a todoConfig)
    if (Object.keys(mergedConfig).length === 0 && typeof daysToDecayPackageConfig === 'undefined') {
        mergedConfig = {
            warn: 30,
            error: 60,
        };
    }
    if (typeof mergedConfig.warn === 'number' &&
        typeof mergedConfig.error === 'number' &&
        mergedConfig.warn >= mergedConfig.error) {
        throw new Error(`The provided todo configuration contains invalid values. The \`warn\` value (${mergedConfig.warn}) must be less than the \`error\` value (${mergedConfig.error}).`);
    }
    return mergedConfig;
}
exports.getTodoConfig = getTodoConfig;
/**
 * Ensures that a valid todo config exists in the project by writing one to the package.json
 * if we're invoking the todos functionality for the first time (there is no .lint-todo directory).
 *
 * @param baseDir - The base directory that contains the project's package.json.
 */
function ensureTodoConfig(baseDir) {
    if (!io_1.todoStorageDirExists(baseDir)) {
        const pkg = fs_extra_1.readJsonSync(path_1.join(baseDir, 'package.json'));
        if (!pkg.lintTodo) {
            writeTodoConfig(baseDir, {
                warn: 30,
                error: 60,
            });
        }
    }
}
exports.ensureTodoConfig = ensureTodoConfig;
/**
 * Writes a todo config to the package.json located at the provided baseDir.
 *
 * @param baseDir - The base directory that contains the project's package.json.
 * @param todoConfig - The todo configuration to write to the package.json.
 */
function writeTodoConfig(baseDir, todoConfig) {
    const packageJsonPath = path_1.join(baseDir, 'package.json');
    const contents = fs_extra_1.readFileSync(packageJsonPath, { encoding: 'utf8' });
    const trailingWhitespace = DETECT_TRAILING_WHITESPACE.exec(contents);
    const pkg = JSON.parse(contents);
    if (pkg.lintTodo) {
        return false;
    }
    pkg.lintTodo = {
        daysToDecay: todoConfig,
    };
    let updatedContents = JSON.stringify(pkg, undefined, 2);
    if (trailingWhitespace) {
        updatedContents += trailingWhitespace[0];
    }
    fs_extra_1.writeFileSync(packageJsonPath, updatedContents, { encoding: 'utf8' });
    return true;
}
exports.writeTodoConfig = writeTodoConfig;
function getFromPackageJson(basePath) {
    var _a;
    let pkg;
    try {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        pkg = require(path_1.join(basePath, 'package.json'));
    }
    catch (_b) { }
    return (_a = pkg === null || pkg === void 0 ? void 0 : pkg.lintTodo) === null || _a === void 0 ? void 0 : _a.daysToDecay;
}
function getFromEnvVars() {
    const config = {};
    const warn = getEnvVar('TODO_DAYS_TO_WARN');
    const error = getEnvVar('TODO_DAYS_TO_ERROR');
    if (Number.isInteger(warn)) {
        config.warn = warn;
    }
    if (Number.isInteger(error)) {
        config.error = error;
    }
    return config;
}
function getEnvVar(name) {
    if (process.env[name]) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return Number.parseInt(process.env[name], 10);
    }
}
//# sourceMappingURL=todo-config.js.map